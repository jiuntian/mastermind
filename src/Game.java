
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Random;

public class Game {

    /**
     *
     */
    public static final String[] colors = {"B", "G", "O", "P", "R", "Y", "F", "K"};//K- black F-brown
    private int n_color =6;
    PrintWriter log;
    public Game(int n_color, String name) throws FileNotFoundException{
        this.n_color = n_color;
        log = new PrintWriter(new FileOutputStream(new File("log.txt"), true));
        log.println("Player name: "+name);
    }
    /**
     * Randomly generates a code
     * @return the secret code
     */
    
    public String generateSecretCode() {
        Random generator = new Random();
        String result="";
        int index, numberOfPegs=4;
        String[] c=colors;
        for(int i=0; i<numberOfPegs; i++)
        {
            index=generator.nextInt(n_color);//todo
            result+=c[index];
        }
        return result;
    }

    /**
     * Takes the code (in String form) generated by generateSecretCode() and converts it
     * to the correct indeces for each color, according to the order in the string array colors[]
     * @param code code in String form
     * @return code in int form. For example: if the code if BGOP, this function will return 0123
     */
    public int[] codeToInts(String code) {
        int[] codeInInts = new int[4];
        char[] chars = code.toCharArray();

        for (int i=0; i < 4; i++) {
            switch (chars[i]) {
                case 'B': {
                    codeInInts[i] = 0; break;
                }
                case 'G': {
                    codeInInts[i] = 1; break;
                }
                case 'O': {
                    codeInInts[i] = 2; break;
                }
                case 'P': {
                    codeInInts[i] = 3; break;
                }
                case 'R': {
                    codeInInts[i] = 4; break;
                }
                case 'Y': {
                    codeInInts[i] = 5; break;
                }
                case 'F': {
                    codeInInts[i] = 6; break;
                }
                case 'K': {
                    codeInInts[i] = 7; break;
                }
            }
        }
        return codeInInts;
    }

    /**
     * Will provide feedback for each guess. First generates black pegs and then white pegs
     * @param code the secret code in int form
     * @param nums the current guess in int form
     * @return int array. First element is number of black pegs. Second element is number of white pegs
     */
    public int[] getFeedback(int[] code, int[] nums) {

        int[] tempCode = new int[4];
        int[] tempNums = new int[4];
        for (int i=0; i < 4; i++) {
            tempCode[i] = code[i];
            tempNums[i] = nums[i];
        }


        int blackPegs = 0;
        for (int i=0; i < code.length; i++) {
            if (tempCode[i]==tempNums[i]) {
                blackPegs++;
                tempCode[i]=-1;
                tempNums[i]=-1;
            }
        }

        int whitePegs = 0;
        for (int i=0; i < code.length; i++) {
            if (tempCode[i]==-1) {
                continue;
            }
            for (int j=0;j < code.length; j++) {
                if (tempNums[j]==-1) {
                    continue;
                }
                if (tempCode[i]==tempNums[j]) {
                    whitePegs++;
                    tempCode[i]=-1;
                    tempNums[j]=-1;
                }
            }
        }


        int[] result = new int[2];
        result[0] = blackPegs;
        result[1] = whitePegs;
        log.println(Arrays.toString(nums).replaceAll("-1", "No value").replaceAll("0", "Blue").replaceAll("1", "Green").replaceAll("2", "Orange").replaceAll("3", "Purple").replaceAll("4", "Red").replaceAll("5", "Yellow").replaceAll("6", "Brown").replaceAll("-1", "White"));
        
        return result;
    }

    /**
     * Is called when player loses. This function converts the code in int[] form to string.
     * In other words, it goes the other way as codeToInts.
     * @param codeInInts the code in int[] form
     * @return the secret code as a string
     */
    public String codeForPlayAgain(int[] codeInInts) {
        String result = "";
        for (int i=0; i < 4; i++) {
            switch(codeInInts[i]) {
                case 0: {
                    result = result + "Blue, "; break;
                }
                case 1: {
                    result = result + "Green, "; break;
                }
                case 2: {
                    result = result + "Orange, "; break;
                }
                case 3: {
                    result = result + "Purple, "; break;
                }
                case 4: {
                    result = result + "Red, "; break;
                }
                case 5: {
                    result = result + "Yellow, "; break;
                }
                case 6: {
                    result = result + "Brown, "; break;
                }
                case 7: {
                    result = result + "White, "; break;
                }
            }
        }
        result = result.substring(0, result.length()-2); //to take out the comma at the end
        result = result + ".";
        return result;
    }
}